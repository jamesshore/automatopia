{
  "_args": [
    [
      {
        "name": "object-merge",
        "raw": "object-merge@^2.5.1",
        "rawSpec": "^2.5.1",
        "scope": null,
        "spec": ">=2.5.1 <3.0.0",
        "type": "range"
      },
      "c:\\Projects\\JavaScript\\automatopia"
    ]
  ],
  "_from": "object-merge@>=2.5.1 <3.0.0",
  "_id": "object-merge@2.5.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/object-merge",
  "_npmUser": {
    "email": "matthewkastor@gmail.com",
    "name": "kastor"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "name": "object-merge",
    "raw": "object-merge@^2.5.1",
    "rawSpec": "^2.5.1",
    "scope": null,
    "spec": ">=2.5.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/object-merge/-/object-merge-2.5.1.tgz",
  "_shasum": "077e8915ce38ea7294788448c5dd339e34df4227",
  "_shrinkwrap": null,
  "_spec": "object-merge@^2.5.1",
  "_where": "c:\\Projects\\JavaScript\\automatopia",
  "author": {
    "email": "matthewkastor@gmail.com",
    "name": "Matthew Kastor",
    "url": "https://plus.google.com/100898583798552211130"
  },
  "bugs": {
    "url": "https://github.com/matthewkastor/object-merge/issues"
  },
  "dependencies": {
    "clone-function": ">=1.0.1",
    "object-foreach": ">=0.1.2"
  },
  "description": "Merges JavaScript objects recursively without altering the objects merged.",
  "devDependencies": {
    "atropa-jsformatter": ">=0.1.2",
    "atropa-jslint": ">=0.1.2",
    "browserify": ">=2.29.1",
    "jasmine-node": ">=1.11.0",
    "jsdoc-toolkit": "git+https://github.com/matthewkastor/node-jsdoc-toolkit.git#fix-tests"
  },
  "directories": {
    "doc": "docs",
    "lib": "src"
  },
  "dist": {
    "shasum": "077e8915ce38ea7294788448c5dd339e34df4227",
    "tarball": "https://registry.npmjs.org/object-merge/-/object-merge-2.5.1.tgz"
  },
  "homepage": "https://github.com/matthewkastor/object-merge/",
  "keywords": [
    "object-merge",
    "atropa"
  ],
  "licenses": [
    {
      "type": "gpl-3.0",
      "url": "http://www.gnu.org/licenses/gpl-3.0-standalone.html"
    }
  ],
  "main": "./src/object-merge.js",
  "maintainers": [
    {
      "email": "matthewkastor@gmail.com",
      "name": "kastor"
    }
  ],
  "name": "object-merge",
  "optionalDependencies": {},
  "readme": "# object-merge\r\n\r\nMerges JavaScript objects recursively without altering the objects merged.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install object-merge\r\n```\r\n\r\nhttps://npmjs.org/package/object-merge\r\nSource code available at: https://github.com/matthewkastor/object-merge/\r\n\r\n## Usage\r\n\r\nIn Node:\r\n\r\n```\r\nvar objectMerge = require('object-merge');\r\nvar x = {\r\n    a : 'a',\r\n    b : 'b',\r\n    c : {\r\n        d : 'd',\r\n        e : 'e',\r\n        f : {\r\n            g : 'g'\r\n        }\r\n    }\r\n};\r\nvar y = {\r\n    a : '`a',\r\n    b : '`b',\r\n    c : {\r\n        d : '`d'\r\n    }\r\n};\r\nvar z = {\r\n    a : {\r\n        b : '``b'\r\n    },\r\n    fun : function foo () {\r\n        return 'foo';\r\n    },\r\n    aps : Array.prototype.slice\r\n};\r\nvar out = objectMerge(x, y, z);\r\n// out.a will be {\r\n//         b : '``b'\r\n//     }\r\n// out.b will be '`b'\r\n// out.c will be {\r\n//         d : '`d',\r\n//         e : 'e',\r\n//         f : {\r\n//             g : 'g'\r\n//         }\r\n//     }\r\n// out.fun will be a clone of z.fun\r\n// out.aps will be equal to z.aps\r\n```\r\n\r\nMerging arrays is not the same as `concat`. When they're merged the arrays are\r\n handled as objects. This means that indexes are object properties with numeric\r\n names. Merging `['a']` with `['b']` will give you `['b']` because the two\r\n arrays both have a property `0` and the last one in overrides the first.\r\n However, merging `arr1['a', 'b']` with `arr2[1] = 'override'` will give you\r\n `['a', 'override']` because `arr1` has properties `0` and `1`, while `arr2`\r\n only has the property `1` which overrides `arr1[1]` in the output.\r\n\r\nMerging functions will cause the output function to be a clone of the last\r\n function merged and it will have all the properties of the merged functions\r\n recursively merged together. So something like:\r\n\r\n```\r\nvar func = function () {\r\n    return null;\r\n};\r\nvar func2 = function () {\r\n    return 'hello';\r\n};\r\nfunc.wohoo = 'wohoo';\r\nfunc.obj = {a:'a'};\r\nfunc2.wee = 'wee';\r\nfunc2.obj = {b:'b'};\r\nfunc2.obj2 = {a:'a'};\r\nvar out = objectMerge(func, func2);\r\n```\r\n\r\nwill give you a function `out` that is a clone of `func2`'s function definition\r\n but has the properties: `wohoo`, `obj`, `wee`, and `obj2`. `out.obj` will have\r\n the properties `a` and `b` because the properties of `func` and `func2` are\r\n merged recursively.\r\n \r\n### Options\r\n\r\nOptions exist to do things like limit the depth of object traversal and disable\r\n errors on detection of circular references. In order to specify the options you\r\n must create an options object using the provided method `createOptions`, a\r\n normal object just won't work.\r\n\r\n```\r\nvar objectMerge = require('object-merge');\r\nvar a = {\r\n    'a1' : {\r\n        'a2' : {\r\n            'a3' : {}\r\n        }\r\n    }\r\n};\r\nvar b = {\r\n    'b1' : {\r\n        'b2' : {\r\n            'b3' : {}\r\n        }\r\n    }\r\n};\r\nvar opts = objectMerge.createOptions({depth : 2});\r\nvar res = objectMerge(opts, a, b);\r\n// res will be\r\n// {\r\n//     'a1' : {\r\n//         'a2' : {}\r\n//     },\r\n//     'b1' : {\r\n//         'b2' : {}\r\n//     }\r\n// }\r\n```\r\n\r\nSee the tests in `browser/tests` for more examples and expected outputs.\r\n\r\nIn the browser, include `./browser/object-merge_web.js` in your page.\r\n `objectMerge` will be available in your page.\r\n\r\nFor full documentation see the docs folder.\r\n\r\n## Tests\r\n\r\nTests can be run from the root of this package with\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nThere are also browser tests available in the `browser` directory.\r\n\r\n## Hacking\r\n\r\nThere are several other scripts listed in package.json for development and\r\n hacking on this module. They can be run with `npm run-script` followed by the\r\n scripts property corresponding to the script you want to run. For example,\r\n given a script called `buildDocs`, it could be run from the package root by:\r\n\r\n```\r\nnpm run-script buildDocs\r\n```\r\n\r\n## Author\r\n\r\nMatthew Kastor\r\nmatthewkastor@gmail.com\r\nhttps://plus.google.com/100898583798552211130\r\n\r\n## License\r\n\r\ngpl-3.0\r\nhttp://www.gnu.org/licenses/gpl-3.0-standalone.html",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/matthewkastor/object-merge.git"
  },
  "scripts": {
    "buildBrowserModule": "node dev/browserify.js",
    "buildDocs": "jsdoc-toolkit -v -d=./docs/jsdoc/ -r -s src/",
    "lint": "atropa-jslint ./src/object-merge.js",
    "srcFormat": "atropa-jsformatter ./src/object-merge.js ./src/object-merge.js",
    "test": "jasmine-node specs/"
  },
  "version": "2.5.1"
}
