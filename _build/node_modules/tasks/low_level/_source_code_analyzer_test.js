// Copyright Titanium I.T. LLC. License granted under terms of "The MIT License."
"use strict";

const { suite, assert } = require("tests");
const analyzer = require("./source_code_analyzer");

module.exports = suite(({ describe, it }) => {

	it("extracts dependencies from source code", () => {
		assert.deepEqual(analyzer.analyze(
				'const foo = require' + '("./source_code_analyzer");\n' +
				'someRandomCode()\n' +
				'// dependency' + ': ./my_other_dependency\n' +
				'\n' +
				'const bar = require' + '("./_source_code_analyzer_test");\n' +
				'someOtherCode(1 + 2);\n'
			),
			[
				{ path: "./source_code_analyzer", line: 1, source: 'const foo = require("./source_code_analyzer");' },
				{ path: "./my_other_dependency", line: 3, source: '// dependency: ./my_other_dependency' },
				{ path: "./_source_code_analyzer_test", line: 5, source: 'const bar = require("./_source_code_analyzer_test");' },
			],
		);
	});

	describe("require statements", ({ it }) => {

		it("handles both single and double quotes", () => {
			assertFound(`const foo = require("./source_code_analyzer");`, "./source_code_analyzer");
			assertFound(`const foo = require('./source_code_analyzer');`, "./source_code_analyzer");
		});

		it("handles whitespace", () => {
			assertFound(`const foo = require   (   './source_code_analyzer'   );`, "./source_code_analyzer");
		});

		it("looks for exact 'require' word", () => {
			assertNotFound(`const foo = xrequire("./source_code_analyzer");`);
		});

		it("ignores require statements that are commented out with // (but not /* */, that's too much work)", () => {
			assertNotFound(`const foo = //require("./source_code_analyzer");`);
			assertNotFound(`//const foo = require("./source_code_analyzer");`);
			assertNotFound(`// const foo = require("./source_code_analyzer");`);
		});

	});

	describe("manual dependencies", ({ it }) => {

		it("supports manually-specifying dependencies", () => {
			assertFound("// dependency: ./source_code_analyzer", "./source_code_analyzer");
		});

		it("allows (and trims) whitespace", () => {
			assertFound("   //    dependency:    ./source_code_analyzer    ", "./source_code_analyzer");
		});

		it("allows no whitespace", () => {
			assertFound("//dependency:./source_code_analyzer", "./source_code_analyzer");
		});

	});
});

function assertFound(sourceCode, expected) {
	assert.equal(analyzer.analyze(sourceCode)[0].path, expected);
}

function assertNotFound(sourceCode) {
	assert.deepEqual(analyzer.analyze(sourceCode), []);
}