// Copyright Titanium I.T. LLC. License granted under terms of "The MIT License."
"use strict";

const { suite, assert } = require("tests");
const ensure = require("util/ensure");
const Reporter = require("./reporter");
const ConsoleOutput = require("infrastructure/console_output");
const Clock = require("infrastructure/clock");
const Colors = require("infrastructure/colors");

const IRRELEVANT_TEXT = "irrelevant_text";
const TIME = Colors.brightWhite.dim(" (0.00s)\n");

module.exports = suite(({ describe }) => {

	describe("reports", ({ it }) => {

		it("writes headline, progress, and footer", async () => {
			const { reporter, stdout } = create();

			await reporter.startAsync("my headline", (report) => {
				report.progress();
				report.progress();
				report.progress();
				report.footer("footer 1");
				report.footer("footer 2");
			});

			assertStdoutEqual(stdout, `my headline: ...${TIME}footer 1footer 2`);
		});

		it("returns result of report function", async () => {
			const { reporter } = create();

			const result1 = await reporter.startAsync(IRRELEVANT_TEXT, () => {
				return 1234;
			});
			assert.equal(result1, 1234);

			const result2 = await reporter.quietStartAsync(IRRELEVANT_TEXT, () => {
				return 5678;
			});
			assert.equal(result2, 5678);
		});

		it("always writes at least one progress dot", async () => {
			const { reporter, stdout } = create();

			await reporter.startAsync("my headline", () => {});

			assertStdoutEqual(stdout, `my headline: .${TIME}`);
		});

		it("writes progress dot and footer even when exception is thrown", async () => {
			const { reporter, stdout } = create();

			await assert.exceptionAsync(
				() => reporter.startAsync("my headline", (report) => {
					report.footer("my footer");
					throw new Error("my error");
				}),
				"my error",
				"should throw exception"
			);

			assertStdoutEqual(stdout, `my headline: .${TIME}my footer`, "should write dot and footer");
		});

		it("allows progress text to be specified", async () => {
			const { reporter, stdout } = create();

			await reporter.startAsync("my headline", report => {
				report.progress({ text: "X" });
			});

			assertStdoutEqual(stdout, `my headline: X${TIME}`);
		});

		it("provides elapsed time", async () => {
			const { reporter, clock } = create();

			await reporter.startAsync(IRRELEVANT_TEXT, async (report) => {
				await clock.tickAsync(1234);
				assert.equal(report.elapsedMs, 1234);
			});
		});

		it("writes elapsed time", async () => {
			const { reporter, stdout, clock } = create();

			await reporter.startAsync("my headline", async (report) => {
				report.progress();
				await clock.tickAsync(1234);
			});

			assertStdoutEqual(stdout, `my headline: .${Colors.brightWhite.dim(" (1.23s)\n")}`);
		});

		it("always writes footer last", async () => {
			const { reporter, stdout } = create();

			await reporter.startAsync("my headline", (report) => {
				report.footer("footer");
				report.progress();
			});

			assertStdoutEqual(stdout, `my headline: .${TIME}footer`);
		});

	});


	describe("quiet reports", ({ it }) => {

		it("doesn't write quiet reports' headline until they explicitly say been started", async () => {
			const { reporter, stdout } = create();

			await reporter.quietStartAsync("my headline", (report) => {
				assertStdoutEqual(stdout, "");
				report.started();
				assertStdoutEqual(stdout, "my headline: ");
			});
		});

		it("quiet reports consider progress to be equivalent to starting", async () => {
			const { reporter, stdout } = create();

			await reporter.quietStartAsync("my headline", (report) => {
				assertStdoutEqual(stdout, "");

				report.progress();
				assertStdoutEqual(stdout, "my headline: .");
			});
		});

		it("doesn't write quiet headlines at all if the report isn't started and there's no footer", async () => {
			const { reporter, stdout } = create();

			await reporter.quietStartAsync("my headline", () => {});
			assertStdoutEqual(stdout, "");
		});

		it("does write quiet headlines if there's a footer, even if there's no progress", async () => {
			const { reporter, stdout } = create();

			await reporter.quietStartAsync("my headline", (report) => {
				report.footer("footer");
			});

			assertStdoutEqual(stdout, `my headline: .${TIME}footer`);
		});

		it("does write quiet headlines if there's an exception, even if there's no progress or footer", async () => {
			const { reporter, stdout } = create();

			await assert.exceptionAsync(
				() => reporter.quietStartAsync("my headline", (report) => {
					throw new Error("my error");
				}),
				"my error",
			);

			assertStdoutEqual(stdout, `my headline: .${TIME}`);
		});

	});


	describe("tracking", ({ it }) => {

		it("tracks usage", async () => {
			const { reporter } = create();

			const output = reporter.trackUsage();

			await reporter.startAsync("report1", async (report1) => {
				assert.deepEqual(output.data, [
					{ "report1": { action: "started" } },
				]);

				output.consume();
				await reporter.quietStartAsync("report2", (report2) => {
					assert.deepEqual(output.data, []);
					report2.started();
					assert.deepEqual(output.data, [
						{ "report2": { action: "started" } },
					]);

					output.consume();
					report1.progress();
					report2.progress({ debug: "my details" });
					assert.deepEqual(output.data, [
						{ "report1": { action: "progress", debug: "" } },
						{ "report2": { action: "progress", debug: "my details" } },
					]);

					output.consume();
					report1.footer("footer1");
					report1.footer("footer2");
					assert.deepEqual(output.data, [
						{ "report1": { action: "footer", text: "footer1" } },
						{ "report1": { action: "footer", text: "footer2" } },
					]);

					output.consume();
				});
			});
			assert.deepEqual(output.data, [
				{ "report2": { action: "end" }},
				{ "report1": { action: "end" }},
			]);
		});

		it("doesn't track default progress dot", async () => {
			const { reporter } = create();

			const output = reporter.trackUsage();

			await reporter.startAsync("report", () => {});
			assert.deepEqual(output.data, [
				{ "report": { action: "started" } },
				{ "report": { action: "end" } },
			]);
		});

	});

});

function create() {
	ensure.signature(arguments, []);

	const clock = Clock.createNull();
	const stdout = ConsoleOutput.createNull();
	const stdoutTracker = stdout.track();

	const reporter = new Reporter(stdout, clock);

	return {
		reporter,
		stdout: stdoutTracker.data,
		clock,
	};
}

function assertStdoutEqual(stdout, expected, message) {
	assert.equal(stdout.join(""), expected, message);
}