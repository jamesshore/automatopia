// Copyright Titanium I.T. LLC. License granted under terms of "The MIT License."
"use strict";

const { suite, assert } = require("tests");
const ensure = require("util/ensure");
const TaskCli = require("./task_cli");
const Tasks = require("./tasks");
const CommandLine = require("infrastructure/command_line");
const Colors = require("infrastructure/colors");
const ConsoleOutput = require("infrastructure/console_output");
const Clock = require("infrastructure/clock");
const FileSystem = require("infrastructure/file_system");
const TaskError = require("./task_error");

module.exports = suite(({ describe }) => {

	describe("running tasks", ({ it }) => {

		it("runs tasks specified on command line", async () => {
			const { tasks, cli } = createCli({
				args: [ "task1", "task3" ],
			});

			let task1Ran = false;
			tasks.defineTask("task1", () => {
				task1Ran = true;
			});

			let task2Ran = false;
			tasks.defineTask("task2", () => {
				task2Ran = true;
			});

			let task3Ran = false;
			tasks.defineTask("task3", () => {
				task3Ran = true;
			});

			await runAsync({ cli, tasks });

			assert.equal(task1Ran, true, "task 1 ran");
			assert.equal(task2Ran, false, "task 2 did not run");
			assert.equal(task3Ran, true, "task 3 ran");
		});

		it("runs 'default' task if no arguments provided", async () => {
			const { tasks, cli } = createCli({
				args: [],
			});

			let defaultRan = false;
			tasks.defineTask("default", () => {
				defaultRan = true;
			});

			let taskRan = false;
			tasks.defineTask("my_task", () => {
				taskRan = true;
			});

			await runAsync({ cli, tasks });
			assert.equal(defaultRan, true, "should have run default task");
			assert.equal(taskRan, false, "should not have run my_task");
		});

		it("does not run 'default' task if arguments provided", async () => {
			const { tasks, cli } = createCli({
				args: [ "my_task" ],
			});

			let defaultRan = false;
			tasks.defineTask("default", () => {
				defaultRan = true;
			});

			let taskRan = false;
			tasks.defineTask("my_task", () => {
				taskRan = true;
			});

			await runAsync({ cli, tasks });
			assert.equal(defaultRan, false, "should not have run default task");
			assert.equal(taskRan, true, "should have run my_task");
		});

		it("displays success banner and elapsed time when tasks complete successfully", async () => {
			const { tasks, cli, stdout, clock } = createCli();

			tasks.defineTask("default", async () => {
				await clock.tickAsync(1237);
			});

			const failedTask = await runAsync({ cli, tasks, successMessage: "my message" });

			assert.equal(failedTask, null, "should have no failed task");
			assert.deepEqual(stdout, [
				"\n" +
				Colors.brightGreen.inverse("   my message   ") + "\n" +
				"(1.24s)\n",
			]);
		});

		it("displays failure banner and exception stack trace when tasks throw exception", async () => {
			const { tasks, cli, stdout } = createCli();

			tasks.defineTask("default", () => {
				throw new Error("my_error");
			});

			await runAsync({ cli, tasks });

			assert.includes(stdout[0], " at ");
		});

		it("doesn't display stack trace when tasks throw special TaskError", async () => {
			const { tasks, cli, stdout } = createCli({
				args: [ "my_task" ]
			});

			tasks.defineTask("my_task", () => {
				throw new TaskError("my_failure");
			});

			const failedTask = await runAsync({ cli, tasks, failureMessage: "my failure message" });

			assert.equal(failedTask, "my_task", "should have failed task");
			assert.deepEqual(stdout, [
				"\n" +
				Colors.brightRed.inverse("   my failure message   ") + "\n" +
				Colors.brightRed.bold("my_failure") + "\n"
			]);
		});

	});


	describe("Debug mode", ({ it }) => {

		it("displays exception stack trace for TaskErrors when --debug parameter specified", async () => {
			const { tasks, cli, stdout } = createCli({
				args: [ "my_task", "--debug" ],
			});

			tasks.defineTask("my_task", () => {
				throw new TaskError("my_error");
			});

			await runAsync({ cli, tasks });

			assert.includes(stdout[1], " at ");
		});

		it("displays task start, stop, and timing when --debug parameter specified", async () => {
			const { tasks, cli, clock, stdoutTracker } = createCli({
				args: [ "parent_task", "--debug" ],
			});

			tasks.defineTask("parent_task", async () => {
				await tasks.runTasksAsync([ "child_task" ]);
				await clock.tickAsync(100);
			});
			tasks.defineTask("child_task", async () => {
				await tasks.runTasksAsync([ "grandchild_task1", "grandchild_task2" ]);
				await clock.tickAsync(200);
			});
			tasks.defineTask("grandchild_task1", async () => {
				await clock.tickAsync(300);
			});
			tasks.defineTask("grandchild_task2", async () => {
				await clock.tickAsync(400);
			});

			// run CLI twice to ensure it turns off event tracker (or we'll get doubled-up data in output)
			await runAsync({ cli, tasks });
			stdoutTracker.consume();

			await runAsync({ cli, tasks, successMessage: "my success" });

			assert.deepEqual(stdoutTracker.data, [
				Colors.white.inverse("start: parent_task\n"),
				Colors.white.inverse("start: child_task\n"),
				Colors.white.inverse("start: grandchild_task1\n"),
				Colors.white.inverse("end: grandchild_task1 (0.30s)\n"),
				Colors.white.inverse("start: grandchild_task2\n"),
				Colors.white.inverse("end: grandchild_task2 (0.40s)\n"),
				Colors.white.inverse("end: child_task (0.20s)\n"),
				Colors.white.inverse("end: parent_task (0.10s)\n"),
				"\n" +
				Colors.brightGreen.inverse(`   my success   `) + "\n" +
				"(1.00s)\n",
			]);
		});

	});


	describe("Command-line help", ({ it }) => {

		it("displays available tasks when --help, -h, --tasks, or -T provided", async () => {
			await assertTasksShown("--help");
			await assertTasksShown("-h");
			await assertTasksShown("--tasks");
			await assertTasksShown("--T");

			async function assertTasksShown(arg) {
				const { tasks, cli, stdoutTracker } = createCli({ args: [ arg ] });
				tasks.defineTask("task1", () => {});
				tasks.defineTask("task3", () => {});
				tasks.defineTask("task2", () => {});

				const failedTask = await runAsync({ cli, tasks });
				assert.deepEqual(failedTask, "__CLI__", "should have failed CLI task");
				assert.deepEqual(stdoutTracker.data, [
					"\n" + Colors.brightWhite("options:") + " <tasks> [-h|--help|-T|--tasks] [--debug]\n\n",
					Colors.brightWhite.underline("Available tasks:") + "\n",
					`  ${Colors.white.bold("task1")}  \n`,
					`  ${Colors.white.bold("task3")}  \n`,
					`  ${Colors.white.bold("task2")}  \n`,
				]);
				stdoutTracker.consume();
			}
		});

		it("displays task descriptions where available", async () => {
			const { tasks, cli, stdout } = createCli({ args: [ "-T" ] });
			tasks.defineTask("task1", () => {});
			tasks.defineTask("task2Longer", () => {});
			tasks.defineTask("task3", () => {});

			tasks.setDescriptions({
				task3: "Task 3 description",
				task2Longer: "Task 2 description",
			});

			await runAsync({ cli, tasks });
			assert.deepEqual(stdout, [
				"\n" + Colors.brightWhite("options:") + " <tasks> [-h|--help|-T|--tasks] [--debug]\n\n",
				Colors.brightWhite.underline("Available tasks:") + "\n",
				`  ${Colors.white.bold("task1      ")}  \n`,
				`  ${Colors.white.bold("task2Longer")}  Task 2 description\n`,
				`  ${Colors.white.bold("task3      ")}  Task 3 description\n`,
			]);
		});

		it("displays available tasks when no arguments provided and 'default' task doesn't exist", async () => {
			const { tasks, cli, stdout } = createCli({ args: [] });
			tasks.defineTask("my_task", () => {});

			await runAsync({ cli, tasks });

			assert.deepEqual(stdout, [
				"\n" + Colors.brightWhite("options:") + " <tasks> [-h|--help|-T|--tasks] [--debug]\n\n",
				Colors.brightWhite.underline("Available tasks:") + "\n",
				`  ${Colors.white.bold("my_task")}  \n`,
			]);
		});

		it("displays error and available tasks when requested task doesn't exist", async () => {
			const { tasks, cli, stdout } = createCli({
				args: [ "my_task", "no_task1", "no_task2" ],
			});

			let taskRan = false;
			tasks.defineTask("my_task", () => {
				taskRan = true;
			});

			const failedTask = await runAsync({ cli, tasks, failureMessage: "my failure message" });

			assert.deepEqual(stdout, [
				"\n" +
				Colors.brightRed.inverse("   my failure message   ") + "\n" +
				Colors.brightRed.bold("Unrecognized task(s): no_task1, no_task2") + "\n",
				"\n",
				"\n" + Colors.brightWhite("options:") + " <tasks> [-h|--help|-T|--tasks] [--debug]\n\n",
				Colors.brightWhite.underline("Available tasks:") + "\n",
				`  ${Colors.white.bold("my_task")}  \n`,
			]);
			assert.deepEqual(taskRan, false, "should not have run any tasks");
			assert.deepEqual(failedTask, "__CLI__", "should have failed CLI task");
		});

	});

});


function createCli({
	args = [],
} = {}) {
	ensure.signature(arguments, [[ undefined, {
		args: [ undefined, Array ],
	}]]);

	const commandLine = CommandLine.createNull({ args });
	const stdout = ConsoleOutput.createNull();
	const stdoutTracker = stdout.track();
	const clock = Clock.createNull();
	const cli = new TaskCli(commandLine, stdout, clock);

	return {
		tasks: Tasks.createNull({ clock }),
		cli,
		stdoutTracker,
		stdout: stdoutTracker.data,
		clock,
	};
}

async function runAsync({
	cli,
	tasks,
	successMessage = "irrelevant_success_message",
	failureMessage = "irrelevant_failure_message",
}) {
	ensure.signature(arguments, [{
		cli: TaskCli,
		tasks: Tasks,
		successMessage: [ undefined, String ],
		failureMessage: [ undefined, String ],
	}]);

	return await cli.runAsync(tasks, successMessage, failureMessage);
}
